/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "knative.dev/serving/pkg/apis/serving/v1"
)

// FuncPoolLister helps list FuncPools.
type FuncPoolLister interface {
	// List lists all FuncPools in the indexer.
	List(selector labels.Selector) (ret []*v1.FuncPool, err error)
	// FuncPools returns an object that can list and get FuncPools.
	FuncPools(namespace string) FuncPoolNamespaceLister
	FuncPoolListerExpansion
}

// funcPoolLister implements the FuncPoolLister interface.
type funcPoolLister struct {
	indexer cache.Indexer
}

// NewFuncPoolLister returns a new FuncPoolLister.
func NewFuncPoolLister(indexer cache.Indexer) FuncPoolLister {
	return &funcPoolLister{indexer: indexer}
}

// List lists all FuncPools in the indexer.
func (s *funcPoolLister) List(selector labels.Selector) (ret []*v1.FuncPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FuncPool))
	})
	return ret, err
}

// FuncPools returns an object that can list and get FuncPools.
func (s *funcPoolLister) FuncPools(namespace string) FuncPoolNamespaceLister {
	return funcPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FuncPoolNamespaceLister helps list and get FuncPools.
type FuncPoolNamespaceLister interface {
	// List lists all FuncPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.FuncPool, err error)
	// Get retrieves the FuncPool from the indexer for a given namespace and name.
	Get(name string) (*v1.FuncPool, error)
	FuncPoolNamespaceListerExpansion
}

// funcPoolNamespaceLister implements the FuncPoolNamespaceLister
// interface.
type funcPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FuncPools in the indexer for a given namespace.
func (s funcPoolNamespaceLister) List(selector labels.Selector) (ret []*v1.FuncPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FuncPool))
	})
	return ret, err
}

// Get retrieves the FuncPool from the indexer for a given namespace and name.
func (s funcPoolNamespaceLister) Get(name string) (*v1.FuncPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("funcpool"), name)
	}
	return obj.(*v1.FuncPool), nil
}

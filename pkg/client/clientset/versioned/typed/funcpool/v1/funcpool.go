/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v12 "knative.dev/serving/pkg/apis/serving/v1"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	scheme "knative.dev/serving/pkg/client/clientset/versioned/scheme"
)

// FuncPoolsGetter has a method to return a FuncPoolInterface.
// A group's client should implement this interface.
type FuncPoolsGetter interface {
	FuncPools(namespace string) FuncPoolInterface
}

// FuncPoolInterface has methods to work with FuncPool resources.
type FuncPoolInterface interface {
	Create(*v12.FuncPool) (*v12.FuncPool, error)
	Update(*v12.FuncPool) (*v12.FuncPool, error)
	UpdateStatus(*v12.FuncPool) (*v12.FuncPool, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v12.FuncPool, error)
	List(opts metav1.ListOptions) (*v12.FuncPoolList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v12.FuncPool, err error)
	FuncPoolExpansion
}

// funcPools implements FuncPoolInterface
type funcPools struct {
	client rest.Interface
	ns     string
}

// newFuncPools returns a FuncPools
func newFuncPools(c *FuncpoolV1Client, namespace string) *funcPools {
	return &funcPools{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the funcPool, and returns the corresponding funcPool object, and an error if there is any.
func (c *funcPools) Get(name string, options metav1.GetOptions) (result *v12.FuncPool, err error) {
	result = &v12.FuncPool{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("funcpools").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FuncPools that match those selectors.
func (c *funcPools) List(opts metav1.ListOptions) (result *v12.FuncPoolList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v12.FuncPoolList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("funcpools").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested funcPools.
func (c *funcPools) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("funcpools").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a funcPool and creates it.  Returns the server's representation of the funcPool, and an error, if there is any.
func (c *funcPools) Create(funcPool *v12.FuncPool) (result *v12.FuncPool, err error) {
	result = &v12.FuncPool{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("funcpools").
		Body(funcPool).
		Do().
		Into(result)
	return
}

// Update takes the representation of a funcPool and updates it. Returns the server's representation of the funcPool, and an error, if there is any.
func (c *funcPools) Update(funcPool *v12.FuncPool) (result *v12.FuncPool, err error) {
	result = &v12.FuncPool{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("funcpools").
		Name(funcPool.Name).
		Body(funcPool).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *funcPools) UpdateStatus(funcPool *v12.FuncPool) (result *v12.FuncPool, err error) {
	result = &v12.FuncPool{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("funcpools").
		Name(funcPool.Name).
		SubResource("status").
		Body(funcPool).
		Do().
		Into(result)
	return
}

// Delete takes name of the funcPool and deletes it. Returns an error if one occurs.
func (c *funcPools) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("funcpools").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *funcPools) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("funcpools").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched funcPool.
func (c *funcPools) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v12.FuncPool, err error) {
	result = &v12.FuncPool{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("funcpools").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
